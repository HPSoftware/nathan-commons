package com.hp.commons.core.collection.aggregator;

import com.hp.commons.core.handler.Handler;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by IntelliJ IDEA.
 * User: grunzwei
 * Date: 8/14/12
 * Time: 9:40 AM
 * To change this template use File | Settings | File Templates.
 *
 * this aggregator maps the elements of the aggregated collection to the result of a function application
 * on those elements.
 * the function is set during the initialization of the aggregator instance and is passed as a
 * {@link Handler}
 *
 * @param <R> the returned value of the handler function -
 *           the resulting map value type.
 * @param <T> the type of the aggregated collection
 *           the resulting map key type.
 */
public class MapAggregator<T, R> implements Aggregator<Map<T, R>, T> {

    /**
     * function to apply on the currently aggregated element to calculate it's mapped value
     */
    private Handler<R, T> valueCalculator;

    /**
     *
     * @param valueCalculator function to apply on the currently aggregated element to
     *                        calculate it's mapped value
     */
    public MapAggregator(Handler<R, T> valueCalculator) {
        this.valueCalculator = valueCalculator;
    }

    /**
     * the resulting map
     */
    private HashMap<T, R> map;

    @Override
    public void init(Collection<T> elements) {
        this.map = new HashMap<T,R>(elements.size());
    }

    @Override
    public void aggregate(T element) {
        this.map.put(element, this.valueCalculator.apply(element));
    }

    /**
     *
     * @return a mapping from the aggregated collection elements to values generated by applying a function on
     * each, and binding the pair as key-value.
     */
    @Override
    public Map<T, R> finish() {
        return this.map;
    }
}
